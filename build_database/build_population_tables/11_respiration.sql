------------------------------------------------------
-- Respiration measurements for adult patients
-- Author: Prabhat Rayapati
-- Contributor: Roman Wang
-- MIMIC version- MIMIC III v1.3
-- Description: Respiration measurement in a criteria in sofa points
-- pf ratio and ventilation status are used to measure respiration
-- criteria for sofa severity score calc.
-- this query produces two tables called ventidurations and pf_ratio.
-- Ventidurations contains the hadm_id, ventilation starttime and
-- ventilation end time and some other info.
-- the pf_ratio conatins subject_id,hadm_id and the charttime of
-- pf ratio and the value of pf ratio along with some other info
---------------------------------------------------------


--#################################################
--#################################################
--############# RESPIRATION #######################
--#################################################
--#################################################


--*********************************************************
--##### VENTILATION DURATION ******************************
--*********************************************************
-- ventduration is a table generated by the ventilation-duration.sql on MIMIC original repository
-- ventdurations contains the icustay_id so we create a copy called ventidurations and join on icustays table to get a
-- hadm_id column added to the copy
DROP TABLE IF EXISTS ventidurations;
CREATE TABLE ventidurations(LIKE ventdurations);
ALTER TABLE ventidurations
ADD hadm_id int;


INSERT INTO ventidurations
SELECT ventdurations.*, icustays.hadm_id
FROM ventdurations LEFT OUTER JOIN icustays
ON ventdurations.icustay_id=icustays.icustay_id;

--lets delete any record without hadm_id
DELETE FROM ventidurations WHERE hadm_id ISNULL;

-- lets add a ventilation status identifier to this table
ALTER TABLE ventidurations
ADD status int;
UPDATE ventidurations SET status=1;

--index ventidurations

DROP INDEX IF EXISTS ventidurations_idx01;
CREATE INDEX ventidurations_idx01
  ON ventidurations (hadm_id);

DROP INDEX IF EXISTS ventidurations_idx02;
CREATE INDEX ventidurations_idx02
  ON ventidurations (starttime);


DROP INDEX IF EXISTS ventidurations_idx03;
CREATE INDEX ventidurations_idx03
  ON ventidurations (endtime);

--*********************************************
--*********** PAO2FIO2 ************************
--*********************************************

-- lets make a table for paofio ratio

--fio2 labevents table
DROP TABLE IF EXISTS labevents_fio2;
CREATE TABLE labevents_fio2 (LIKE labevents_adult_admissions);
INSERT INTO labevents_fio2
SELECT *
FROM labevents_adult_admissions
WHERE itemid=50816;

UPDATE labevents_fio2
SET valuenum= NULL
WHERE valuenum>100;

ALTER TABLE labevents_fio2
DROP COLUMN value, DROP COLUMN valueuom,
DROP COLUMN flag, DROP COLUMN row_id, DROP COLUMN itemid;

--ALTER TABLE labevents_fio2
--ADD fio2_date date;
--UPDATE labevents_fio2
--SET fio2_date=date(charttime);

DELETE FROM labevents_fio2
WHERE valuenum IS NULL;

--fio2 chartevents table
DROP TABLE IF EXISTS chartevents_adult_fio2;
CREATE TABLE chartevents_adult_fio2 (LIKE chartevents);
INSERT INTO chartevents_adult_fio2
SELECT *
FROM chartevents_adult_admissions
WHERE itemid IN (223835, 3420, 3422, 190);

UPDATE chartevents_adult_fio2
SET valuenum =(CASE
WHEN valuenum>0 AND valuenum <= 1 THEN valuenum*100
WHEN valuenum>1 AND valuenum<21 THEN NULL
WHEN valuenum>=21 AND valuenum<=100 THEN valuenum
ELSE NULL
END)
WHERE itemid=223835;

UPDATE chartevents_adult_fio2
SET valuenum =(CASE
WHEN valuenum>0.20 AND valuenum < 1 THEN valuenum*100
ELSE valuenum
END)
WHERE itemid=190;

ALTER TABLE chartevents_adult_fio2
DROP COLUMN icustay_id, DROP COLUMN cgid,
DROP COLUMN value, DROP COLUMN valueuom,
DROP COLUMN warning, DROP COLUMN error,
DROP COLUMN resultstatus, DROP COLUMN stopped,
DROP COLUMN storetime, DROP COLUMN row_id,
DROP COLUMN itemid;

--ALTER TABLE chartevents_adult_fio2
--ADD fio2_date date;
--UPDATE chartevents_adult_fio2
--SET fio2_date=date(charttime);

DELETE FROM chartevents_adult_fio2
WHERE valuenum IS NULL;


-- insert the two fio2 tables into a new table called fio2
DROP TABLE IF EXISTS fio2;
CREATE TABLE fio2 (LIKE labevents_fio2);
INSERT INTO fio2
SELECT DISTINCT *
FROM labevents_fio2;

INSERT INTO fio2
SELECT DISTINCT *
FROM chartevents_adult_fio2;

DELETE FROM fio2
WHERE hadm_id IS NULL;

UPDATE fio2
SET valuenum= ROUND(CAST(valuenum AS NUMERIC),0);

--lets just keep the values only when they are updated
-- ex values are repeatedly taken on a given day, so we will only
-- keep records that show a change in the values
--ex image fio2_repeat.png to image fio2_updatesOnly.png

DROP TABLE IF EXISTS fio2_final;
CREATE TABLE fio2_final (LIKE fio2);
ALTER TABLE fio2_final
ADD prev_val int;

-- the following query is only keeping the records if the fio2 value changes
INSERT INTO fio2_final
SELECT *
FROM (SELECT *,LAG(valuenum) over (partition BY hadm_id order by charttime) as prev_val
FROM fio2 ) AS x
WHERE valuenum <> COALESCE(prev_val,-1)
ORDER BY charttime;

--ALTER TABLE fio2_final
--DROP COLUMN prev_val;
DROP TABLE IF EXISTS fio2_event;
CREATE TABLE fio2_event (LIKE fio2_final);
INSERT INTO fio2_event
SELECT *
FROM fio2_final
order by hadm_id,charttime;

--index the fio2 table
DROP INDEX IF EXISTS fio2_event_idx01;
CREATE INDEX fio2_event_idx01
  ON fio2_event (hadm_id);

DROP INDEX IF EXISTS fio2_event_idx02;
CREATE INDEX fio2_event_idx02
  ON fio2_event (charttime);

-- lets add an identifier column which identifies if the row is fio2 value or not, useful for future
-- when we merge pao2 and fio2 tables
 ALTER TABLE fio2_event
 ADD fio2 int;
 UPDATE fio2_event
 SET fio2=1;
-------------------------------------------------
--------------- pio2 table ----------------------
-------------------------------------------------
--get po2 values from labevents table
DROP TABLE IF EXISTS labevents_po2;
CREATE TABLE labevents_po2 (LIKE labevents);
INSERT INTO labevents_po2
SELECT *
FROM labevents_adult_admissions
WHERE itemid=50821;

UPDATE labevents_po2
SET valuenum= NULL
WHERE valuenum>800;

ALTER TABLE labevents_po2
DROP COLUMN value, DROP COLUMN valueuom,
DROP COLUMN flag, DROP COLUMN row_id,
DROP COLUMN itemid;

--ALTER TABLE labevents_po2
--ADD fio2_date date;
--UPDATE labevents_po2
--SET fio2_date=date(charttime);

DELETE FROM labevents_po2
WHERE valuenum IS NULL;

DELETE FROM labevents_po2
WHERE hadm_id IS NULL;

UPDATE labevents_po2
SET valuenum= ROUND(CAST(valuenum AS NUMERIC),0);
--rename table as po2

ALTER TABLE labevents_po2 RENAME TO po2;

-- lets make a table of updates only
-- same as we did in fio2 table above
DROP TABLE IF EXISTS po2_final;
CREATE TABLE po2_final (LIKE po2);
ALTER TABLE po2_final
ADD prev_val int;

INSERT INTO po2_final
SELECT *
FROM (SELECT *,LAG(valuenum) over (partition BY hadm_id order by charttime) as prev_val
FROM po2 ) AS x
WHERE valuenum <> COALESCE(prev_val,-1)
ORDER BY charttime;

--ALTER TABLE po2_final
--DROP COLUMN prev_val;
DROP TABLE IF EXISTS po2_event;
CREATE TABLE po2_event (LIKE po2_final);
INSERT INTO po2_event
SELECT *
FROM po2_final
order by hadm_id,charttime;

DROP INDEX IF EXISTS po2_event_idx01;
CREATE INDEX po2_event_idx01
  ON po2_event (hadm_id);

DROP INDEX IF EXISTS po2_event_idx02;
CREATE INDEX po2_event_idx02
  ON po2_event (charttime);

ALTER TABLE po2_event
ADD fio2 int;

-- identifier to indicate the value is not an fio2 value, set to zero
UPDATE po2_event
SET fio2=0;

---------------------
-- unified table to get pf ratio
---------------------

-- for a given po2 row, we find the closest occuring value of fio2 before the po2s charttime and set it as the prev value
UPDATE po2_event
SET prev_val = (SELECT valuenum FROM fio2_event
WHERE po2_event.hadm_id=fio2_event.hadm_id AND po2_event.charttime>=fio2_event.charttime
ORDER BY charttime DESC LIMIT 1);

-- do the same for fio2
UPDATE fio2_event
SET prev_val = (SELECT valuenum FROM po2_event
WHERE po2_event.hadm_id=fio2_event.hadm_id AND fio2_event.charttime>=po2_event.charttime
ORDER BY charttime DESC LIMIT 1);

-- create a table pafi, insert the data of both po2_events and fio2_events
DROP TABLE IF EXISTS pafi;
CREATE TABLE pafi (LIKE po2_event);
INSERT INTO pafi
SELECT *
FROM po2_event;

INSERT INTO pafi
SELECT *
FROM fio2_event;

-- a ordered copy of pafi
DROP TABLE IF EXISTS pafi_ratio;
CREATE TABLE pafi_ratio (LIKE pafi);
INSERT INTO pafi_ratio
SELECT *
FROM pafi
ORDER BY hadm_id,charttime;

DELETE FROM pafi_ratio
WHERE prev_val IS NULL;

-- add a column to calculate the pf ratio
ALTER TABLE pafi_ratio
ADD ratio double precision;

DELETE FROM pafi_ratio
WHERE prev_val=0 OR valuenum=0;

-- caluclate the pf ratio for each row
UPDATE pafi_ratio
SET ratio=(prev_val/valuenum)
WHERE fio2=1;

UPDATE pafi_ratio
SET ratio=(valuenum/prev_val)
WHERE fio2=0;

--create a ordered table pafi_ratio
DROP TABLE IF EXISTS pafio2_ratio ;
CREATE TABLE pafio2_ratio (LIKE pafi_ratio);
INSERT INTO pafio2_ratio
SELECT *
FROM pafi_ratio
ORDER BY hadm_id,charttime;

-- merging ventilation and pafi ratio tables

ALTER TABLE pafio2_ratio
ADD ventilation_before timestamp(0),
ADD time_before int,
ADD ventilation_after timestamp(0),
ADD time_after int;

-- for some reason indexing pafio2_ratio table wasnt working so lets create a duplicate and do stuff on the dup
DROP TABLE IF EXISTS  pf_ratio;
CREATE TABLE pf_ratio (LIKE pafio2_ratio);
INSERT INTO pf_ratio
SELECT *
FROM pafio2_ratio;

-- INDEX THIS TABLE

DROP index IF EXISTS pf_ratio_idx01;
CREATE INDEX pf_ratio_idx01
ON pf_ratio (hadm_id);

DROP index IF EXISTS pf_ratio_idx02;
CREATE INDEX pf_ratio_idx02
ON pf_ratio (charttime);
